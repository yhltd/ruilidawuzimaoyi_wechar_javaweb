{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/**\r\n * @module  to-array-buffer\r\n */\r\n\r\n\r\n\r\nvar str2ab = require('string-to-arraybuffer')\r\nvar flat = require('flatten-vertex-data')\r\n// var isBlob = require('is-blob')\r\n\r\n\r\nmodule.exports = function toArrayBuffer (arg) {\r\n\t//zero-length or undefined-like\r\n\tif (!arg) return null\r\n\r\n\t//array buffer\r\n\tif (arg instanceof ArrayBuffer) return arg\r\n\r\n\t//try to decode data-uri\r\n\tif (typeof arg === 'string') {\r\n\t\treturn str2ab(arg)\r\n\t}\r\n\r\n\t// File & Blob\r\n\t// if (isBlob(src) || (src instanceof global.File)) {\r\n\t\t// FIXME: we cannot use it here bc FileReader is async\r\n\t// }\r\n\r\n\t//array buffer view: TypedArray, DataView, Buffer etc\r\n\tif (ArrayBuffer.isView(arg)) {\r\n\t\t// if byteOffset is not 0, return sub-reference (slice is the only way)\r\n\t\tif (arg.byteOffset) {\r\n\t\t\treturn arg.buffer.slice(arg.byteOffset, arg.byteOffset + arg.byteLength)\r\n\t\t}\r\n\t\treturn arg.buffer\r\n\t}\r\n\r\n\t//buffer/data nested: NDArray, ImageData etc.\r\n\t//FIXME: NDArrays with custom data type may be invalid for this procedure\r\n\tif (arg.buffer || arg.data || arg._data) {\r\n\t\tvar result = toArrayBuffer(arg.buffer || arg.data || arg._data)\r\n\t\treturn result\r\n\t}\r\n\r\n\t// detect if flat\r\n\tif (Array.isArray(arg)) {\r\n\t\tfor (var i = 0; i < arg.length; i++) {\r\n\t\t\tif (arg[i].length != null) {\r\n\t\t\t\targ = flat(arg)\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//array-like or unknown\r\n\t//consider Uint8Array knows how to treat the input\r\n\tvar result = new Uint8Array(arg)\r\n\r\n\tif (!result.length) return null\r\n\treturn result.buffer\r\n}\r\n"]}